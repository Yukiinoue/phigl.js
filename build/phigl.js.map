{"version":3,"sources":["Attribute.js","Drawable.js","Extensions.js","Framebuffer.js","Ibo.js","InstancedDrawable.js","Program.js","Shader.js","Texture.js","Uniform.js","Vbo.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACplfile":"phigl.js","sourcesContent":["phina.namespace(function() {\r\n  \r\n  phina.define(\"phigl.Attribute\", {\r\n\r\n    gl: null,\r\n    name: null,\r\n    _location: null,\r\n    _type: null,\r\n    _ptype: null,\r\n\r\n    init: function(gl, program, name, type) {\r\n      this.gl = gl;\r\n      this.name = name;\r\n\r\n      this._location = gl.getAttribLocation(program, name);\r\n      if (this._location == -1) {\r\n        throw \"attribute \" + name + \" not found\";\r\n      }\r\n      gl.enableVertexAttribArray(this._location);\r\n\r\n      this._type = type;\r\n      switch (type) {\r\n        case gl.FLOAT:\r\n          this.size = 1;\r\n          this._ptype = gl.FLOAT;\r\n          break;\r\n        case gl.FLOAT_VEC2:\r\n          this.size = 2;\r\n          this._ptype = gl.FLOAT;\r\n          break;\r\n        case gl.FLOAT_VEC3:\r\n          this.size = 3;\r\n          this._ptype = gl.FLOAT;\r\n          break;\r\n        case gl.FLOAT_VEC4:\r\n          this.size = 4;\r\n          this._ptype = gl.FLOAT;\r\n          break;\r\n      }\r\n    },\r\n\r\n    specify: function(stride, offset) {\r\n      // console.log(\"attribute\", this.name, this._location);\r\n      var gl = this.gl;\r\n      gl.vertexAttribPointer(this._location, this.size, this._ptype, false, stride, offset);\r\n      return this;\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Drawable\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    gl: null,\r\n    extVao: null,\r\n\r\n    program: null,\r\n    indices: null,\r\n    attributes: null,\r\n    stride: 0,\r\n    offsets: null,\r\n    uniforms: null,\r\n    vbo: null,\r\n    drawMode: 0,\r\n    vao: null,\r\n\r\n    init: function(gl, extVao) {\r\n      this.superInit();\r\n      this.gl = gl;\r\n      this.extVao = extVao;\r\n      this.attributes = [];\r\n      this.offsets = [];\r\n      this.uniforms = {};\r\n      this.drawMode = gl.TRIANGLES;\r\n    },\r\n\r\n    setDrawMode: function(mode) {\r\n      this.drawMode = mode;\r\n      return this;\r\n    },\r\n\r\n    setProgram: function(program) {\r\n      this.program = program;\r\n      program.use();\r\n      return this;\r\n    },\r\n\r\n    setIndexValues: function(value) {\r\n      if (!this.indices) this.indices = phigl.Ibo(this.gl);\r\n      this.indices.set(value);\r\n      return this;\r\n    },\r\n\r\n    setIndexBuffer: function(ibo) {\r\n      this.indices = ibo;\r\n      return this;\r\n    },\r\n\r\n    setAttributes: function(names) {\r\n      names = Array.prototype.concat.apply([], arguments);\r\n\r\n      var stride = 0;\r\n      for (var i = 0; i < names.length; i++) {\r\n        var attr = names[i];\r\n        if (typeof attr === \"string\") attr = this.program.getAttribute(attr);\r\n        this.attributes.push(attr);\r\n        this.offsets.push(stride);\r\n        stride += attr.size * 4;\r\n      }\r\n      this.stride = stride;\r\n      return this;\r\n    },\r\n\r\n    setAttributeData: function(data, usage) {\r\n      if (!this.vbo) {\r\n        this.vbo = phigl.Vbo(this.gl, usage);\r\n      }\r\n      this.vbo.set(data);\r\n\r\n      this.vbo.bind();\r\n      var stride = this.stride;\r\n      var offsets = this.offsets;\r\n      this.attributes.forEach(function(v, i) { v.specify(stride, offsets[i]) });\r\n      phigl.Vbo.unbind(this.gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    setAttributeDataArray: function(dataArray, usage) {\r\n      if (!this.vbo) {\r\n        this.vbo = phigl.Vbo(this.gl, usage);\r\n      }\r\n      this.vbo.setAsInterleavedArray(dataArray);\r\n\r\n      this.vbo.bind();\r\n      var stride = this.stride;\r\n      var offsets = this.offsets;\r\n      this.attributes.forEach(function(v, i) { v.specify(stride, offsets[i]) });\r\n      phigl.Vbo.unbind(this.gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    setAttributeVbo: function(vbo) {\r\n      this.vbo = vbo;\r\n\r\n      this.vbo.bind();\r\n      var stride = this.stride;\r\n      var offsets = this.offsets;\r\n      this.attributes.forEach(function(v, i) { v.specify(stride, offsets[i]) });\r\n      phigl.Vbo.unbind(this.gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    createVao: function() {\r\n      var gl = this.gl;\r\n      var stride = this.stride;\r\n      var offsets = this.offsets;\r\n\r\n      if (!this.extVao) this.extVao = phigl.Extensions.getVertexArrayObject(gl);\r\n      if (!this.vao) this.vao = this.extVao.createVertexArrayOES();\r\n\r\n      this.extVao.bindVertexArrayOES(this.vao);\r\n\r\n      if (this.indices) this.indices.bind();\r\n\r\n      if (this.vbo) this.vbo.bind();\r\n      this.attributes.forEach(function(v, i) {\r\n        v.specify(stride, offsets[i]);\r\n        gl.enableVertexAttribArray(v._location);\r\n      });\r\n\r\n      this.extVao.bindVertexArrayOES(null);\r\n\r\n      phigl.Ibo.unbind(gl);\r\n      phigl.Vbo.unbind(gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    setUniforms: function(names) {\r\n      names = Array.prototype.concat.apply([], arguments);\r\n\r\n      var program = this.program;\r\n      var map = Array.prototype.reduce.call(names, function(m, name) {\r\n        m[name] = program.getUniform(name);\r\n        return m;\r\n      }, {});\r\n      this.uniforms.$extend(map);\r\n      return this;\r\n    },\r\n\r\n    draw: function() {\r\n      // console.log(\"-- begin\");\r\n\r\n      var gl = this.gl;\r\n      var ext = this.extVao;\r\n\r\n      this.program.use();\r\n\r\n      if (this.vao) {\r\n        ext.bindVertexArrayOES(this.vao);\r\n      } else {\r\n        if (this.indices) this.indices.bind();\r\n        if (this.vbo) this.vbo.bind();\r\n        var stride = this.stride;\r\n        var offsets = this.offsets;\r\n        this.attributes.forEach(function(v, i) { v.specify(stride, offsets[i]) });\r\n      }\r\n\r\n      this.uniforms.forIn(function(k, v) { v.assign() });\r\n\r\n      this.flare(\"predraw\");\r\n      this.gl.drawElements(this.drawMode, this.indices.length, gl.UNSIGNED_SHORT, 0);\r\n      this.flare(\"postdraw\");\r\n\r\n      if (this.vao) {\r\n        ext.bindVertexArrayOES(null);\r\n      } else {\r\n        phigl.Ibo.unbind(gl);\r\n        phigl.Vbo.unbind(gl);\r\n      }\r\n\r\n      this.uniforms.forIn(function(k, v) { v.reassign() });\r\n\r\n      // console.log(\"-- end\");\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  \r\n  phina.define(\"phigl.Extensions\", {\r\n    \r\n    _static: {\r\n      \r\n      getVertexArrayObject: function(gl) {\r\n        return this._get(gl, \"OES_vertex_array_object\");\r\n      },\r\n\r\n      getInstancedArrays: function(gl) {\r\n        return this._get(gl, \"ANGLE_instanced_arrays\");\r\n      },\r\n      \r\n      _get: function(gl, name) {\r\n        var ext = gl.getExtension(name);\r\n        if (ext) {\r\n          return ext;\r\n        } else {\r\n          throw name + \" is not supported\";\r\n        }\r\n      }\r\n    },\r\n    \r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Framebuffer\", {\r\n    gl: null,\r\n    texture: null,\r\n\r\n    _framebuffer: null,\r\n    _depthRenderbuffer: null,\r\n    _texture: null,\r\n\r\n    init: function(gl, width, height) {\r\n      this.gl = gl;\r\n      this.width = width;\r\n      this.height = height;\r\n      \r\n      this.texture = phigl.Texture(gl);\r\n\r\n      this._framebuffer = gl.createFramebuffer();\r\n      this._depthRenderbuffer = gl.createRenderbuffer();\r\n      this._texture = this.texture._texture;\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\r\n\r\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthRenderbuffer);\r\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n      \r\n      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthRenderbuffer);\r\n\r\n      gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);\r\n\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    },\r\n\r\n    bind: function() {\r\n      var gl = this.gl;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);\r\n      return this;\r\n    },\r\n\r\n    _static: {\r\n      unbind: function(gl) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Ibo\", {\r\n\r\n    gl: null,\r\n    length: 0,\r\n\r\n    _buffer: null,\r\n\r\n    init: function(gl) {\r\n      this.gl = gl;\r\n      this._buffer = gl.createBuffer();\r\n    },\r\n\r\n    set: function(data) {\r\n      var gl = this.gl;\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._buffer);\r\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int16Array(data), gl.STATIC_DRAW);\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n      this.length = data.length;\r\n      return this;\r\n    },\r\n\r\n    bind: function() {\r\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this._buffer);\r\n      return this;\r\n    },\r\n\r\n    delete: function() {\r\n      this.gl.deleteBuffer(this._buffer);\r\n    },\r\n\r\n    _static: {\r\n      unbind: function(gl) {\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        return this;\r\n      },\r\n    },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return null;\r\n        },\r\n        set: function(v) {\r\n          this.set(v);\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.InstancedDrawable\", {\r\n    superClass: \"phigl.Drawable\",\r\n\r\n    instanceAttributes: null,\r\n    ext: null,\r\n\r\n    instanceVbo: null,\r\n    instanceStride: 0,\r\n    instanceOffsets: null,\r\n\r\n    init: function(gl, extInstancedArrays) {\r\n      this.superInit(gl);\r\n      this.ext = extInstancedArrays;\r\n      this.instanceAttributes = [];\r\n      this.instanceOffsets = [];\r\n    },\r\n\r\n    setInstanceAttributes: function(names) {\r\n      names = Array.prototype.concat.apply([], arguments);\r\n\r\n      var gl = this.gl;\r\n      var ext = this.ext;\r\n\r\n      var stride = 0;\r\n      for (var i = 0; i < names.length; i++) {\r\n        var attr = names[i];\r\n        if (typeof attr === \"string\") attr = this.program.getAttribute(attr);\r\n        this.instanceAttributes.push(attr);\r\n        this.instanceOffsets.push(stride);\r\n        stride += attr.size * 4;\r\n      }\r\n      this.instanceStride = stride;\r\n\r\n      return this;\r\n    },\r\n\r\n    setInstanceAttributeData: function(data) {\r\n      if (!this.instanceVbo) this.instanceVbo = phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW);\r\n      this.instanceVbo.set(data);\r\n\r\n      this.instanceVbo.bind();\r\n      var iStride = this.instanceStride;\r\n      var iOffsets = this.instanceOffsets;\r\n      this.instanceAttributes.forEach(function(v, i) { v.specify(iStride, iOffsets[i]) });\r\n      phigl.Vbo.unbind(this.gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    setInstanceAttributeDataArray: function(dataArray) {\r\n      if (!this.instanceVbo) this.instanceVbo = phigl.Vbo(this.gl);\r\n      this.instanceVbo.setAsInterleavedArray(dataArray);\r\n\r\n      this.instanceVbo.bind();\r\n      var iStride = this.instanceStride;\r\n      var iOffsets = this.instanceOffsets;\r\n      this.instanceAttributes.forEach(function(v, i) { v.specify(iStride, iOffsets[i]) });\r\n      phigl.Vbo.unbind(this.gl);\r\n\r\n      return this;\r\n    },\r\n\r\n    createVao: function() {\r\n      return this;\r\n    },\r\n\r\n    draw: function(instanceCount) {\r\n      var gl = this.gl;\r\n      var ext = this.ext;\r\n\r\n      this.program.use();\r\n\r\n      if (this.indices) this.indices.bind();\r\n\r\n      if (this.vbo) this.vbo.bind();\r\n      var stride = this.stride;\r\n      var offsets = this.offsets;\r\n      this.attributes.forEach(function(v, i) {\r\n        v.specify(stride, offsets[i]);\r\n      });\r\n\r\n      if (this.instanceVbo) this.instanceVbo.bind();\r\n      var iStride = this.instanceStride;\r\n      var iOffsets = this.instanceOffsets;\r\n      this.instanceAttributes.forEach(function(v, i) {\r\n        v.specify(iStride, iOffsets[i]);\r\n        ext.vertexAttribDivisorANGLE(v._location, 1);\r\n      });\r\n\r\n      this.uniforms.forIn(function(k, v) { v.assign() });\r\n\r\n      this.flare(\"predraw\");\r\n      this.ext.drawElementsInstancedANGLE(this.drawMode, this.indices.length, gl.UNSIGNED_SHORT, 0, instanceCount);\r\n      this.flare(\"postdraw\");\r\n\r\n      this.instanceAttributes.forEach(function(v, i) {\r\n        ext.vertexAttribDivisorANGLE(v._location, 0);\r\n      });\r\n      phigl.Ibo.unbind(gl);\r\n      phigl.Vbo.unbind(gl);\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  var id = 0;\r\n\r\n  phina.define(\"phigl.Program\", {\r\n\r\n    gl: null,\r\n    linked: false,\r\n\r\n    _program: null,\r\n\r\n    _vbo: null,\r\n\r\n    _attributes: null,\r\n    _uniforms: null,\r\n\r\n    init: function(gl) {\r\n      this.gl = gl;\r\n\r\n      this._program = gl.createProgram();\r\n      this._program._id = id++;\r\n      this.linked = false;\r\n\r\n      this._attributes = {};\r\n      this._uniforms = {};\r\n    },\r\n\r\n    attach: function(shader) {\r\n      var gl = this.gl;\r\n\r\n      if (typeof shader === \"string\") {\r\n        shader = phina.asset.AssetManager.get(\"vertexShader\", shader) || phina.asset.AssetManager.get(\"fragmentShader\", shader);\r\n      }\r\n\r\n      if (!shader.compiled) {\r\n        shader.compile(gl);\r\n      }\r\n\r\n      gl.attachShader(this._program, shader._shader);\r\n\r\n      return this;\r\n    },\r\n\r\n    link: function() {\r\n      var gl = this.gl;\r\n\r\n      gl.linkProgram(this._program);\r\n\r\n      if (gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\r\n\r\n        var attrCount = gl.getProgramParameter(this._program, gl.ACTIVE_ATTRIBUTES);\r\n        for (var i = 0; i < attrCount; i++) {\r\n          var attr = gl.getActiveAttrib(this._program, i);\r\n          this.getAttribute(attr.name, attr.type);\r\n        }\r\n\r\n        var uniCount = gl.getProgramParameter(this._program, gl.ACTIVE_UNIFORMS);\r\n        for (var i = 0; i < uniCount; i++) {\r\n          var uni = gl.getActiveUniform(this._program, i);\r\n          this.getUniform(uni.name, uni.type);\r\n        }\r\n\r\n        this.linked = true;\r\n        return this;\r\n      } else {\r\n        this.linked = false;\r\n        throw gl.getProgramInfoLog(this._program);\r\n      }\r\n    },\r\n    \r\n    getAttribute: function(name, type) {\r\n      if (!this._attributes[name]) {\r\n        this._attributes[name] = phigl.Attribute(this.gl, this._program, name, type);\r\n      }\r\n      return this._attributes[name];\r\n    },\r\n\r\n    getUniform: function(name, type) {\r\n      if (!this._uniforms[name]) {\r\n        this._uniforms[name] = phigl.Uniform(this.gl, this._program, name, type);\r\n      }\r\n      return this._uniforms[name];\r\n    },\r\n\r\n    use: function() {\r\n      this.gl.useProgram(this._program);\r\n      // console.log(\"useProgram\", this._program);\r\n      return this;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Shader\", {\r\n    superClass: \"phina.asset.File\",\r\n\r\n    type: null,\r\n    gl: null,\r\n    compiled: false,\r\n\r\n    _shader: null,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.compiled = false;\r\n    },\r\n\r\n    compile: function(gl) {\r\n      this.gl = gl;\r\n\r\n      this.type = this._type(gl);\r\n\r\n      this._shader = gl.createShader(this.type);\r\n      gl.shaderSource(this._shader, this.data);\r\n      gl.compileShader(this._shader);\r\n\r\n      if (gl.getShaderParameter(this._shader, gl.COMPILE_STATUS)) {\r\n        this.compiled = true;\r\n        return this;\r\n      } else {\r\n        this.compiled = false;\r\n        throw gl.getShaderInfoLog(this._shader);\r\n      }\r\n    },\r\n\r\n    _type: function(gl) {\r\n      return 0;\r\n    },\r\n  });\r\n\r\n  phina.define(\"phigl.VertexShader\", {\r\n    superClass: \"phigl.Shader\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    },\r\n\r\n    _type: function(gl) {\r\n      return gl.VERTEX_SHADER;\r\n    },\r\n  });\r\n  phina.asset.AssetLoader.assetLoadFunctions[\"vertexShader\"] = function(key, path) {\r\n    var shader = phigl.VertexShader();\r\n    return shader.load({\r\n      path: path,\r\n    });\r\n  };\r\n\r\n  phina.define(\"phigl.FragmentShader\", {\r\n    superClass: \"phigl.Shader\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    },\r\n\r\n    _type: function(gl) {\r\n      return gl.FRAGMENT_SHADER;\r\n    },\r\n  });\r\n  phina.asset.AssetLoader.assetLoadFunctions[\"fragmentShader\"] = function(key, path) {\r\n    var shader = phigl.FragmentShader();\r\n    return shader.load({\r\n      path: path,\r\n    });\r\n  };\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Texture\", {\r\n\r\n    gl: null,\r\n\r\n    _texture: null,\r\n\r\n    init: function(gl, image) {\r\n      this.gl = gl;\r\n      this._texture = gl.createTexture();\r\n      if (image) {\r\n        this.setImage(image);\r\n      }\r\n    },\r\n\r\n    setImage: function(image) {\r\n      var gl = this.gl;\r\n\r\n      if (typeof image === \"string\") {\r\n        image = phina.asset.AssetManager.get(\"image\", image);\r\n      }\r\n      gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image.domElement);\r\n      gl.generateMipmap(gl.TEXTURE_2D);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n      return this;\r\n    },\r\n\r\n    bind: function(unitIndex) {\r\n      var gl = this.gl;\r\n      gl.activeTexture(gl[\"TEXTURE\" + (unitIndex || 0)]);\r\n      gl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n      return this;\r\n    },\r\n\r\n    delete: function() {\r\n      this.gl.deleteTexture(this._texture);\r\n    },\r\n\r\n    _static: {\r\n      unbind: function(gl) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        return this;\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"phigl.Uniform\", {\r\n\r\n    gl: null,\r\n    name: null,\r\n\r\n    texture: null,\r\n\r\n    _location: null,\r\n    _value: null,\r\n    _type: null,\r\n    _uniformMethod: null,\r\n\r\n    init: function(gl, program, name, type) {\r\n      this.gl = gl;\r\n      this.name = name;\r\n\r\n      this._location = gl.getUniformLocation(program, name);\r\n      this._type = type;\r\n\r\n      switch (type) {\r\n        case gl.FLOAT:\r\n          this._uniformMethod = \"uniform1f\";\r\n          break;\r\n        case gl.FLOAT_VEC2:\r\n          this._uniformMethod = \"uniform2fv\";\r\n          break;\r\n        case gl.FLOAT_VEC3:\r\n          this._uniformMethod = \"uniform3fv\";\r\n          break;\r\n        case gl.FLOAT_VEC4:\r\n          this._uniformMethod = \"uniform4fv\";\r\n          break;\r\n        case gl.FLOAT_MAT2:\r\n          this._uniformMethod = \"uniformMatrix2fv\";\r\n          break;\r\n        case gl.FLOAT_MAT3:\r\n          this._uniformMethod = \"uniformMatrix3fv\";\r\n          break;\r\n        case gl.FLOAT_MAT4:\r\n          this._uniformMethod = \"uniformMatrix4fv\";\r\n          break;\r\n        case gl.SAMPLER_2D:\r\n          this._uniformMethod = \"uniform1i\";\r\n          break;\r\n      }\r\n    },\r\n\r\n    setValue: function(value) {\r\n      this._value = value;\r\n      return this;\r\n    },\r\n\r\n    setTexture: function(texture) {\r\n      this.texture = texture;\r\n      return this;\r\n    },\r\n\r\n    assign: function() {\r\n      var gl = this.gl;\r\n\r\n      switch (this._type) {\r\n        case gl.FLOAT:\r\n        case gl.FLOAT_VEC2:\r\n        case gl.FLOAT_VEC3:\r\n        case gl.FLOAT_VEC4:\r\n          gl[this._uniformMethod](this._location, this._value);\r\n          break;\r\n        case gl.FLOAT_MAT2:\r\n        case gl.FLOAT_MAT3:\r\n        case gl.FLOAT_MAT4:\r\n          gl[this._uniformMethod](this._location, false, this._value);\r\n          break;\r\n        case gl.SAMPLER_2D:\r\n          if (this.texture) this.texture.bind(this._value);\r\n          gl[this._uniformMethod](this._location, this._value);\r\n          break;\r\n      }\r\n\r\n      return this;\r\n    },\r\n    \r\n    reassign: function() {\r\n      var gl = this.gl;\r\n\r\n      switch (this._type) {\r\n        case gl.SAMPLER_2D:\r\n          if (this.texture) phigl.Texture.unbind(gl);\r\n          break;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._value;\r\n        },\r\n        set: function(v) {\r\n          this.setValue(v);\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  var i = 0;\r\n\r\n  phina.define(\"phigl.Vbo\", {\r\n\r\n    gl: null,\r\n    usage: null,\r\n    _vbo: null,\r\n\r\n    array: null,\r\n\r\n    init: function(gl, usage) {\r\n      this.gl = gl;\r\n      this.usage = usage || gl.STATIC_DRAW;\r\n      this._vbo = gl.createBuffer();\r\n      this._vbo._id = i++;\r\n    },\r\n\r\n    set: function(data) {\r\n      var gl = this.gl;\r\n      if (this.array) {\r\n        this.array.set(data);\r\n      } else {\r\n        this.array = new Float32Array(data);\r\n      }\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.array, this.usage);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * [{ unitSize: 3, data: [...] }, { unitSize: 2, data: [...] }]\r\n     */\r\n    setAsInterleavedArray: function(dataArray) {\r\n      var count = dataArray[0].data.length / dataArray[0].unitSize;\r\n      var interleavedArray = [];\r\n      for (var i = 0; i < count; i++) {\r\n        dataArray.forEach(function(d) {\r\n          for (var j = 0; j < d.unitSize; j++) {\r\n            interleavedArray.push(d.data[i * d.unitSize + j]);\r\n          }\r\n        });\r\n      }\r\n      return this.set(interleavedArray);\r\n    },\r\n\r\n    bind: function() {\r\n      var gl = this.gl;\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this._vbo);\r\n      // console.log(\"bindBuffer\", this._vbo, this.array.length);\r\n      return this;\r\n    },\r\n\r\n    delete: function() {\r\n      this.gl.deleteBuffer(this._vbo);\r\n    },\r\n\r\n    _static: {\r\n      unbind: function(gl) {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        // console.log(\"unbind\")\r\n      },\r\n    },\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"/source/"}